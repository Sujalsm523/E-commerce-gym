/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-02-03 11:39:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class buy_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>NutriPro | Supplement Purchase</title>\r\n");
      out.write("    \r\n");
      out.write("    <!-- Bootstrap 5 -->\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    \r\n");
      out.write("    <!-- Font Awesome -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\">\r\n");
      out.write("    \r\n");
      out.write("    <style>\r\n");
      out.write("        :root {\r\n");
      out.write("            --primary-color: #007bff;\r\n");
      out.write("            --secondary-color: #6c757d;\r\n");
      out.write("            --background-color: #f4f4f6;\r\n");
      out.write("            --text-color: #333;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        body {\r\n");
      out.write("            background: linear-gradient(135deg, var(--background-color) 0%, #e0e4e8 100%);\r\n");
      out.write("            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n");
      out.write("            color: var(--text-color);\r\n");
      out.write("            min-height: 100vh;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .purchase-container {\r\n");
      out.write("            background: white;\r\n");
      out.write("            border-radius: 15px;\r\n");
      out.write("            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\r\n");
      out.write("            padding: 40px;\r\n");
      out.write("            animation: fadeIn 0.8s ease-in-out;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        @keyframes fadeIn {\r\n");
      out.write("            from { opacity: 0; transform: translateY(20px); }\r\n");
      out.write("            to { opacity: 1; transform: translateY(0); }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .form-control {\r\n");
      out.write("            transition: all 0.3s ease;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .form-control:focus {\r\n");
      out.write("            box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);\r\n");
      out.write("            border-color: var(--primary-color);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-primary {\r\n");
      out.write("            background-color: var(--primary-color);\r\n");
      out.write("            border: none;\r\n");
      out.write("            transition: all 0.4s ease;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            gap: 10px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-primary:hover {\r\n");
      out.write("            transform: translateY(-5px);\r\n");
      out.write("            box-shadow: 0 10px 20px rgba(0,123,255,0.3);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .validation-error {\r\n");
      out.write("            color: red;\r\n");
      out.write("            font-size: 0.8em;\r\n");
      out.write("            margin-top: 5px;\r\n");
      out.write("            display: none;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .success-message {\r\n");
      out.write("            animation: slideIn 0.5s ease-out;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        @keyframes slideIn {\r\n");
      out.write("            from { opacity: 0; transform: translateY(20px); }\r\n");
      out.write("            to { opacity: 1; transform: translateY(0); }\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container py-5\">\r\n");
      out.write("        <div class=\"row justify-content-center\">\r\n");
      out.write("            <div class=\"col-md-8\">\r\n");
      out.write("                <div class=\"purchase-container\">\r\n");
      out.write("                    <h2 class=\"text-center mb-4\">\r\n");
      out.write("                        <i class=\"fas fa-shopping-cart me-2\"></i>Complete Your Purchase\r\n");
      out.write("                    </h2>\r\n");
      out.write("                    \r\n");
      out.write("                    <form id=\"purchaseForm\" action=\"submitOrder\" method=\"post\" novalidate>\r\n");
      out.write("                        <div class=\"row\">\r\n");
      out.write("                            <div class=\"col-md-6 mb-3\">\r\n");
      out.write("                                <label for=\"itemId\" class=\"form-label\">Supplement ID</label>\r\n");
      out.write("                                <input type=\"text\" class=\"form-control\" id=\"itemId\" name=\"itemId\" required>\r\n");
      out.write("                                <div class=\"validation-error\" id=\"itemIdError\">Please enter a valid Supplement ID</div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                            \r\n");
      out.write("                            <div class=\"col-md-6 mb-3\">\r\n");
      out.write("                                <label for=\"itemName\" class=\"form-label\">Supplement Name</label>\r\n");
      out.write("                                <input type=\"text\" class=\"form-control\" id=\"itemName\" name=\"itemName\" required>\r\n");
      out.write("                                <div class=\"validation-error\" id=\"itemNameError\">Please enter the Supplement Name</div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"row\">\r\n");
      out.write("                            <div class=\"col-md-6 mb-3\">\r\n");
      out.write("                                <label for=\"name\" class=\"form-label\">Full Name</label>\r\n");
      out.write("                                <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" required>\r\n");
      out.write("                                <div class=\"validation-error\" id=\"nameError\">Please enter your full name</div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                            \r\n");
      out.write("                            <div class=\"col-md-6 mb-3\">\r\n");
      out.write("                                <label for=\"contact\" class=\"form-label\">Contact Number</label>\r\n");
      out.write("                                <input type=\"tel\" class=\"form-control\" id=\"contact\" name=\"contact\" required pattern=\"[0-9]{10}\">\r\n");
      out.write("                                <div class=\"validation-error\" id=\"contactError\">Please enter a valid 10-digit contact number</div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"mb-3\">\r\n");
      out.write("                            <label for=\"address\" class=\"form-label\">Delivery Address</label>\r\n");
      out.write("                            <textarea class=\"form-control\" id=\"address\" name=\"address\" rows=\"3\" required></textarea>\r\n");
      out.write("                            <div class=\"validation-error\" id=\"addressError\">Please enter your delivery address</div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"row\">\r\n");
      out.write("                            <div class=\"col-md-6 mb-3\">\r\n");
      out.write("                                <label for=\"pincode\" class=\"form-label\">Pincode</label>\r\n");
      out.write("                                <input type=\"text\" class=\"form-control\" id=\"pincode\" name=\"pincode\" required pattern=\"[0-9]{6}\">\r\n");
      out.write("                                <div class=\"validation-error\" id=\"pincodeError\">Please enter a valid 6-digit pincode</div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"d-flex justify-content-between mt-4\">\r\n");
      out.write("                            <button type=\"button\" class=\"btn btn-secondary\" onclick=\"window.location.href='supplement'\">\r\n");
      out.write("                                <i class=\"fas fa-arrow-left me-2\"></i>Back to Items\r\n");
      out.write("                            </button>\r\n");
      out.write("                            <button type=\"submit\" class=\"btn btn-primary\">\r\n");
      out.write("                                Complete Purchase <i class=\"fas fa-check-circle ms-2\"></i>\r\n");
      out.write("                            </button>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </form>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        document.getElementById('purchaseForm').addEventListener('submit', function (event) {\r\n");
      out.write("            let isValid = true;\r\n");
      out.write("            const fields = [\r\n");
      out.write("                { id: 'itemId', error: 'itemIdError', message: 'Please enter a valid Supplement ID' },\r\n");
      out.write("                { id: 'itemName', error: 'itemNameError', message: 'Please enter the Supplement Name' },\r\n");
      out.write("                { id: 'name', error: 'nameError', message: 'Please enter your full name' },\r\n");
      out.write("                { id: 'contact', error: 'contactError', message: 'Please enter a valid 10-digit contact number', pattern: /^[0-9]{10}$/ },\r\n");
      out.write("                { id: 'address', error: 'addressError', message: 'Please enter your delivery address' },\r\n");
      out.write("                { id: 'pincode', error: 'pincodeError', message: 'Please enter a valid 6-digit pincode', pattern: /^[0-9]{6}$/ }\r\n");
      out.write("            ];\r\n");
      out.write("\r\n");
      out.write("            fields.forEach(field => {\r\n");
      out.write("                const input = document.getElementById(field.id);\r\n");
      out.write("                const error = document.getElementById(field.error);\r\n");
      out.write("                \r\n");
      out.write("                if (!input.value.trim() || (field.pattern && !field.pattern.test(input.value))) {\r\n");
      out.write("                    error.textContent = field.message;\r\n");
      out.write("                    error.style.display = 'block';\r\n");
      out.write("                    input.classList.add('is-invalid');\r\n");
      out.write("                    isValid = false;\r\n");
      out.write("                } else {\r\n");
      out.write("                    error.style.display = 'none';\r\n");
      out.write("                    input.classList.remove('is-invalid');\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            if (!isValid) {\r\n");
      out.write("                event.preventDefault();\r\n");
      out.write("            } else {\r\n");
      out.write("                event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("                const successMessage = document.createElement('div');\r\n");
      out.write("                successMessage.className = 'alert alert-success text-center success-message';\r\n");
      out.write("                successMessage.innerHTML = `\r\n");
      out.write("                    <h3><i class=\"fas fa-truck me-2\"></i>Thank you for your purchase!</h3>\r\n");
      out.write("                    <p>Redirecting to items page...</p>\r\n");
      out.write("                `;\r\n");
      out.write("\r\n");
      out.write("                const purchaseContainer = document.querySelector('.purchase-container');\r\n");
      out.write("                purchaseContainer.innerHTML = '';\r\n");
      out.write("                purchaseContainer.appendChild(successMessage);\r\n");
      out.write("\r\n");
      out.write("                setTimeout(() => {\r\n");
      out.write("                    window.location.href = 'supplement';\r\n");
      out.write("                }, 3000);\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
