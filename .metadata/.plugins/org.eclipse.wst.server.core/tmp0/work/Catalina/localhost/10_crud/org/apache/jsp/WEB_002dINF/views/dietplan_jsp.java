/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-02-11 02:53:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;

public final class dietplan_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Personalized Nutrition Strategy</title>\r\n");
      out.write("    \r\n");
      out.write("    <!-- Performance Optimization -->\r\n");
      out.write("    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("    <link rel=\"preload\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" as=\"style\">\r\n");
      out.write("    \r\n");
      out.write("    <!-- Google Fonts -->\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("    \r\n");
      out.write("    <!-- Animate.css for animations -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\">\r\n");
      out.write("    \r\n");
      out.write("    <!-- Font Awesome -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\">\r\n");
      out.write("    \r\n");
      out.write("    <style>\r\n");
      out.write("        :root {\r\n");
      out.write("            --primary-color: #2c3e50;\r\n");
      out.write("            --secondary-color: #3498db;\r\n");
      out.write("            --background-color: #ecf0f1;\r\n");
      out.write("            --text-color: #34495e;\r\n");
      out.write("            --accent-color: #e74c3c;\r\n");
      out.write("            --transition-speed: 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        * {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Poppins', sans-serif;\r\n");
      out.write("            background: linear-gradient(135deg, var(--background-color) 0%, #ffffff 100%);\r\n");
      out.write("            color: var(--text-color);\r\n");
      out.write("            line-height: 1.6;\r\n");
      out.write("            overflow-x: hidden;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .result-container {\r\n");
      out.write("            max-width: 1200px;\r\n");
      out.write("            margin: 50px auto;\r\n");
      out.write("            background: white;\r\n");
      out.write("            padding: 40px;\r\n");
      out.write("            border-radius: 15px;\r\n");
      out.write("            box-shadow: 0 20px 50px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            perspective: 1000px;\r\n");
      out.write("            position: relative;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .header {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            margin-bottom: 40px;\r\n");
      out.write("            position: relative;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-back {\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            left: 0;\r\n");
      out.write("            top: 50%;\r\n");
      out.write("            transform: translateY(-50%);\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            color: var(--primary-color);\r\n");
      out.write("            transition: all 0.3s ease;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-back:hover {\r\n");
      out.write("            background-color: rgba(0,0,0,0.05);\r\n");
      out.write("            transform: translateY(-50%) translateX(-10px);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .strategy-details {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            gap: 30px;\r\n");
      out.write("            background-color: #f9f9f9;\r\n");
      out.write("            padding: 30px;\r\n");
      out.write("            border-radius: 15px;\r\n");
      out.write("            transition: all var(--transition-speed) ease;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .strategy-details:hover {\r\n");
      out.write("            transform: translateY(-10px);\r\n");
      out.write("            box-shadow: 0 15px 30px rgba(0,0,0,0.1);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .strategy-icon {\r\n");
      out.write("            flex: 0 0 100px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            font-size: 70px;\r\n");
      out.write("            color: var(--secondary-color);\r\n");
      out.write("            transition: transform 0.4s ease;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .strategy-details:hover .strategy-icon {\r\n");
      out.write("            transform: rotate(15deg);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .food-grid {\r\n");
      out.write("            display: grid;\r\n");
      out.write("            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\r\n");
      out.write("            gap: 15px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .food-item {\r\n");
      out.write("            background-color: white;\r\n");
      out.write("            border: 1px solid #e0e0e0;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            transition: all 0.3s ease;\r\n");
      out.write("            box-shadow: 0 4px 6px rgba(0,0,0,0.1);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .food-item:hover {\r\n");
      out.write("            transform: scale(1.05);\r\n");
      out.write("            box-shadow: 0 8px 15px rgba(0,0,0,0.15);\r\n");
      out.write("            background-color: var(--secondary-color);\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .meal-timing-table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border-collapse: separate;\r\n");
      out.write("            border-spacing: 0;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .meal-timing-table th {\r\n");
      out.write("            background-color: var(--primary-color);\r\n");
      out.write("            color: white;\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .meal-timing-table td {\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            border-bottom: 1px solid #e0e0e0;\r\n");
      out.write("            transition: background-color 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .meal-timing-table tr:hover {\r\n");
      out.write("            background-color: rgba(52, 152, 219, 0.05);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .cta-section {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            margin-top: 30px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .cta-button {\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("            padding: 15px 30px;\r\n");
      out.write("            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));\r\n");
      out.write("            color: white;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            transition: all 0.4s ease;\r\n");
      out.write("            position: relative;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .cta-button:hover {\r\n");
      out.write("            transform: translateY(-5px);\r\n");
      out.write("            box-shadow: 0 10px 20px rgba(0,0,0,0.2);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        @media (max-width: 768px) {\r\n");
      out.write("            .strategy-details {\r\n");
      out.write("                flex-direction: column;\r\n");
      out.write("                text-align: center;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <!-- Rest of the existing code remains the same -->\r\n");
      out.write("     <div class=\"result-container animate__animated animate__fadeIn\">\r\n");
      out.write("        <div class=\"header\">\r\n");
      out.write("            <a href=\"diet\" class=\"btn-back\">\r\n");
      out.write("                <i class=\"fas fa-arrow-left\"></i> Back to Diet Selection\r\n");
      out.write("            </a>\r\n");
      out.write("            <h1>Your Nutrition Strategy</h1>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        ");

            // Comprehensive Diet Strategies
            Map<String, Map<String, Object>> dietStrategies = new HashMap<>();
            
            // Weight Loss Strategy
            Map<String, Object> weightLossStrategy = new HashMap<>();
            weightLossStrategy.put("title", "Weight Loss Optimization");
            weightLossStrategy.put("description", "A comprehensive approach focusing on calorie deficit, nutrient-dense foods, and metabolic boost.");
            weightLossStrategy.put("icon", "fas fa-weight");
            weightLossStrategy.put("recommendedFoods", new String[]{
                "Chicken Breast", "Salmon", "Spinach", 
                "Broccoli", "Greek Yogurt", "Eggs", 
                "Quinoa", "Berries", "Almonds"
            });

            // Muscle Gain Strategy
            Map<String, Object> muscleGainStrategy = new HashMap<>();
            muscleGainStrategy.put("title", "Muscle Growth Acceleration");
            muscleGainStrategy.put("description", "High-protein nutrition plan designed to support muscle hypertrophy and strength development.");
            muscleGainStrategy.put("icon", "fas fa-dumbbell");
            muscleGainStrategy.put("recommendedFoods", new String[]{
                "Lean Beef", "Whey Protein", "Brown Rice", 
                "Sweet Potato", "Eggs", "Oats", 
                "Salmon", "Nuts", "Avocado"
            });

            // Balanced Diet Strategy
            Map<String, Object> balancedDietStrategy = new HashMap<>();
            balancedDietStrategy.put("title", "Holistic Nutrition Balance");
            balancedDietStrategy.put("description", "Comprehensive nutrition approach focusing on balanced macronutrients and overall wellness.");
            balancedDietStrategy.put("icon", "fas fa-balance-scale");
            balancedDietStrategy.put("recommendedFoods", new String[]{
                "Quinoa", "Salmon", "Spinach", 
                "Sweet Potato", "Greek Yogurt", "Eggs", 
                "Berries", "Almonds", "Olive Oil"
            });

            dietStrategies.put("weightLoss", weightLossStrategy);
            dietStrategies.put("muscleGain", muscleGainStrategy);
            dietStrategies.put("balancedDiet", balancedDietStrategy);

            // Retrieve selected diet type with fallback
            String dietType = request.getParameter("dietType");
            if (dietType == null) {
                dietType = "weightLoss"; // Default strategy
            }

            Map<String, Object> selectedStrategy = dietStrategies.get(dietType);
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        ");
 if (selectedStrategy != null) { 
      out.write("\r\n");
      out.write("            <div class=\"strategy-details\">\r\n");
      out.write("                <div class=\"strategy-icon\">\r\n");
      out.write("                    <i class=\"");
      out.print( selectedStrategy.get("icon") );
      out.write("\"></i>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"strategy-content\">\r\n");
      out.write("                    <h2>");
      out.print( selectedStrategy.get("title") );
      out.write("</h2>\r\n");
      out.write("                    <p>");
      out.print( selectedStrategy.get("description") );
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("                    <div class=\"recommended-foods\">\r\n");
      out.write("                        <h3>Recommended Foods</h3>\r\n");
      out.write("                        <div class=\"food-grid\">\r\n");
      out.write("                            ");
 
                            String[] recommendedFoods = (String[]) selectedStrategy.get("recommendedFoods");
                            for (String food : recommendedFoods) { 
                            
      out.write("\r\n");
      out.write("                                <div class=\"food-item\">\r\n");
      out.write("                                    ");
      out.print( food );
      out.write("\r\n");
      out.write("                                </div>\r\n");
      out.write("                            ");
 } 
      out.write("\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <!-- Meal Timing Section -->\r\n");
      out.write("            <div class=\"meal-timing-section\">\r\n");
      out.write("                <h3>Optimal Meal Timing</h3>\r\n");
      out.write("                <table class=\"meal-timing-table\">\r\n");
      out.write("                    <thead>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <th>Meal</th>\r\n");
      out.write("                            <th>Time</th>\r\n");
      out.write("                            <th>Recommended Foods</th>\r\n");
      out.write("                            <th>Purpose</th>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                    </thead>\r\n");
      out.write("                    <tbody>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td>Breakfast</td>\r\n");
      out.write("                            <td>7:00 - 8:00 AM</td>\r\n");
      out.write("                            <td>Eggs, Oatmeal, Greek Yogurt</td>\r\n");
      out.write("                            <td>Metabolism Kickstart</td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td>Mid-Morning Snack</td>\r\n");
      out.write("                            <td>10:30 - 11:00 AM</td>\r\n");
      out.write("                            <td>Almonds, Apple</td>\r\n");
      out.write("                            <td>Sustained Energy</td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td>Lunch</td>\r\n");
      out.write("                            <td>12:30 - 1:30 PM</td>\r\n");
      out.write("                            <td>Grilled Chicken, Quinoa, Vegetables</td>\r\n");
      out.write("                            <td>Protein Intake</td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td>Afternoon Snack</td>\r\n");
      out.write("                            <td>4:00 - 4:30 PM</td>\r\n");
      out.write("                            <td>Protein Shake, Berries</td>\r\n");
      out.write("                            <td>Metabolism Boost</td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td>Dinner</td>\r\n");
      out.write("                            <td>7:00 - 8:00 PM</td>\r\n");
      out.write("                            <td>Salmon, Roasted Vegetables</td>\r\n");
      out.write("                            <td>Light Protein</td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                    </tbody>\r\n");
      out.write("                </table>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"cta-section\">\r\n");
      out.write("                <a href=\"diet\" class=\"cta-button\">Explore More Strategies</a>\r\n");
      out.write("            </div>\r\n");
      out.write("        ");
 } else { 
      out.write("\r\n");
      out.write("            <div class=\"error-message\">\r\n");
      out.write("                <p>No strategy found. Please select a valid diet type.</p>\r\n");
      out.write("            </div>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        // Optional: Add any client-side interactions or validations\r\n");
      out.write("        document.addEventListener('DOMContentLoaded', () => {\r\n");
      out.write("            console.log('Nutrition Strategy Page Loaded');\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
